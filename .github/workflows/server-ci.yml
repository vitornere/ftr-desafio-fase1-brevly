name: E2E Server Tests and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types: [opened, reopened, labeled, unlabeled, synchronize]

jobs:
  lint:
    name: Run Lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./server

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"
          cache-dependency-path: ./server/pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run Lint
        run: pnpm exec biome check --no-errors-on-unmatched --files-ignore-unknown=true --colors=off

  tests:
    name: Run E2E Server Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./server

    services:
      postgres:
        image: postgres:16-alpine
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres_test
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"
          cache-dependency-path: ./server/pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests
        run: pnpm test

  trivy:
    name: Run Trivy vulnerability scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./server

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image
        uses: docker/build-push-action@v6
        with:
          load: true
          push: false
          context: ./server
          tags: ${{ vars.ECR_REPOSITORY }}:trivy
          cache-from: type=gha,scope=server-build
          cache-to: type=gha,mode=max,scope=server-build

      - name: Run Trivy scanner
        uses: aquasecurity/trivy-action@0.29.0
        with:
          image-ref: ${{ vars.ECR_REPOSITORY }}:trivy
          format: table
          ignore-unfixed: true
          vuln-type: os,library
          severity: CRITICAL,HIGH

  # push:
  #   name: Push Server Image
  #   needs: [tests, trivy]
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push'
  #   defaults:
  #     run:
  #       working-directory: ./server

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: us-east-2

  #     - name: Login to AWS ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v2

  #     - name: Generate image tag
  #       id: image-tag
  #       run: |
  #         SHA=$(echo $GITHUB_SHA | cut -c 1-7)
  #         echo "sha=$SHA" >> $GITHUB_OUTPUT

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Build and push image to AWS ECR
  #       uses: docker/build-push-action@v6
  #       with:
  #         context: ./server
  #         push: true
  #         tags: ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:${{ steps.image-tag.outputs.sha }}
  #         cache-from: type=gha,scope=server-build

  #     - name: Render Amazon ECS task definition
  #       id: render-web-container
  #       uses: aws-actions/amazon-ecs-render-task-definition@v1
  #       with:
  #         task-definition: .aws/task_definition.json
  #         container-name: ${{ vars.ECS_CONTAINER_NAME }}
  #         image: ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:${{ steps.image-tag.outputs.sha }}
  #         environment-variables: |
  #           environment=staging
  #           DOPPLER_TOKEN=${{ secrets.DOPPLER_TOKEN }}

  #     - name: Deploy to Amazon ECS service
  #       uses: aws-actions/amazon-ecs-deploy-task-definition@v2
  #       with:
  #         task-definition: ${{ steps.render-web-container.outputs.task-definition }}
  #         service: ${{ vars.ECS_SERVICE_NAME }}
  #         cluster: ${{ vars.ECS_CLUSTER_NAME }}
